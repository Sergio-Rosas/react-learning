======================================
Start
======================================

Imports:
import React from "react";
import ReactDOM from "react-dom/client";

Function:
function App() {
    return ...
}

Root creation and rendering:
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<React.StrictMode><App /></React.StrictMode>);

=======================================
Components
=======================================
Components are functions that always start with the first letter uppercase and have to return a SINGLE markup:
When a component is used, that is called a Component Instance.

function ComponentName(props) {
    return <tag>Text</tag>
}

Props are immutable (read-only).
Props are external data passed by the parent component.
Receiving new props causes the component to re-render.
States are mutable.

All components have the props argument even if it's empty.

CHILDREN PROP
It's the content that is between the open and close tag on a component: <Component>Children prop</Component>.
It's passed with the "children" keyword to the component props list.

React is one-way data flow, from parent to child only.

COMPONENT COMPOSITION
It's when the children prop is used to pass a component, that way the parent component is reusable and the child component
is not dependant of the parent component.

When a Component Instance is used, a React Element is created. That is what will render the Dom Element.

COMPONENT LIFECYCLE
1) Mount (The initial render, when the states and props are created).
2) Re-render (Optional; it happens when the state, the props changes or the context changes, or when the parent is re-rendered).
3) Unmount (The instance is destroyed and removed; all states and props are also destroyed).

=======================================
State
======================================
It's internal data the component can hold over time.
It comprises 3 steps: variable creation, use it and update it in an event.
import { useState } from "react"
const|let|var [variable, setFunction] = useState(defaultValue);
It's updated by the component itself.
When the state is updated the component is re-rendered.
Start always from local state and move to global only if needed.
As default value it receives pure functions without arguments too.
The default value will only be used on mount.

DERIVED STATE:
A constant that depends on a piece of state.
Derived states are created when states that can be obtained from other states are converted to simple variables.

STATE MANAGEMENT:
When to create it.
What type.
Where to place it.
How the data flows.

All setter functions of the useState are memoized by default.


=======================================
Effects
=======================================
The effects are side effects, things that occur outside the component. Due to the React nature of being
pure functional, the hook useEffect is used to process that kind of side effects.
That hook is used to handle side effects during the component lifecycle and to keep it synchronized with the external world.
Effects fun after every render by default.

useEffect(func () {
    ...
}, dependencyArray)

The dependency array is composed of every state variable, prop, and context value that is used inside and MUST contain them.
The dependency array MUST include any reactive values, what means, every function or variable that reference any other reactive value.
Those dependencies indicate when to run the effect: if one of them change, the effect will run again.

If an array is provided, the effect will run on mount and in every re-render triggered by the array items.
If an empty array is provided, the effect will run only on mount.
If no array is provided, the effect will run on every re-render.

The effects run after the Browser is Painted and if they update a state a re-render is made again.
The effects have an optional clean-up function that runs before the effect is called again and after the component is unmounted.
The clean-up function is declared in a return statement.

useEffect hook should be avoided in these cases:
1) Responding to a user event. An event handler function should be used instead.
2) Fetching data on component mount. For little apps it's okay but is preferred to use libraries like React Query.
3) Synchronizing state changes with one another. Using derived state and event handlers is advices.

EFFECTS SHOULD BE USED AS A LAST RESORT.

=======================================
Reference
=======================================
The useRef() hook is used to preserve information across renders.
It's a mutable box that can be changed with the ".current" method.
It can also contain DOM elements.
The biggest difference between useState and useRef is that useRef doesn't re-render the component if it changes.


=======================================
Reducer
=======================================
The useReducer() hook is a state hook with a pure function reducer.
The useReducer takes as arguments the reducer function and the initial state:
    const [state, dispatch] = useReducer(function, initialState);
The function that is passed to the useReducer hook have 2 arguments, the current state and the action. The dispatcher
function set the action argument:
    function name(state, action) {}
    dispatch({type: "value", payload: "value"});

useReducer() is used to handle complicated state management, so it's encouraged to have complicated logic inside it.

It's recommended to use useReducer() for multiple related pieces of state and complex state.


=======================================
Context API
=======================================
useContext() is a hook used to resolve the prop drilling issue. It's a way for every child to use states at multiple parent
levels.

It is set on the parent component with "createContext()" that creates a new component.

Usage:
1) createContext()
2) Wrap components that need the states on the new component calling the method "Provider" and passing an object with all the states:
    <ContextName.Provider value={{key1: values, key2: values}><ContextName.Provider/>
3) useContext()

The best practice is to create the context in its own file with all the logic and with a custom hook as the export.


=======================================
Memo
=======================================
useMemo is a hook used to memoize values between renders.
3 big cases:
1) Memoizing props to prevent wasted renders (together with memo()).
2) Memoizing values to avoid expensive re-calculations on every render.
3) Memoizing values that are used in depency array of another hook.


=======================================
Callback
=======================================
useCallback is a hook used to memoize functions between renders.
3 big cases:
1) Memoizing props to prevent wasted renders (together with memo()).
2) Memoizing values to avoid expensive re-calculations on every render.
3) Memoizing values that are used in depency array of another hook.


=======================================
Importing CSS files
=======================================
import "css_file_location_and_name.css"


======================================
JSX syntax
======================================
JavaScript code should be within curly brackets: {12}, {data.prop}, {{key: value}}.
Props are passed to the component like HTML properties: <tag prop="value"></tag>.
Statement like if/else, for, switch, are not allowed.
Only expression are allowed.
Only one HTML wrapper is allowed. To wrap more than one the React Fragment is used: <></>.
React Fragment longer version to put keys: <React.Fragment></React.Fragment>.


======================================
Events
======================================
The events are handled like inline events on HTML but the event should be on camelcase: onClick={func}, onLoad={func}, etc.


=====================================
Hooks
=====================================
Hooks are functions that allow to interact with React internals.
All hooks start with "use": useState, useEffect, useReducer, useContext, useRef, useCallback, useMemo, useTransition,
    useDeferredValue (useLayoutEffect, useDebugValue, useImperativeHandle, useId, useExternalStore, useInsertionEffect).
They can only be used at the beginning of the function, not inside any statement like if/else, while, etc.
Custom hooks can be created.

CUSTOM HOOKS
They can be created to reuse non-visual logic that has hooks inside it.

====================================
Thinking in React
====================================
1. Breaking down the app in components and their relationship.
2. Building the static app.
3. Thinking about the state.
4. Data flow.


====================================
memo()
====================================
The memo() function is used to memoize components. It receives a component as an argument and returns the component.


====================================
React Behind the Scenes
====================================
Rendering process:
1) Render is triggered:
    - Initial render of the app OR
    - State is updated: that process is triggered for the entire application.
2) Render phase:
    - Take all Component Instances that triggered a re-render
    - That creates new React Elements that create a new React Element Tree (also called a Virtual DOM):
        - The React Element Tree is a cheap version of the DOM is a JavaScript Object.
        - All children Components of the Component that needs re-rendering are re-rendered too.
    - Reconciliation and Diffing are made:
        - The reconciler is called the Fiber Tree. The reconciliation is the process in which React knows which DOM
        elements need to be inserted, deleted, or updated, because writing to the actual DOM is inefficient. The reconciler
        is the heart of React. The Fiber Tree is mutable and is not re-rendered. It keeps track of all changes in the React
        App. It is composed of a linked list, works asynchronously, and has a queue of work.
        - The diffing occurs, that is the compare of elements based on their position in the tree.
        - An updated Fiber Tree is created with a list of DOM updates (list of effects).
3) Commit phase:
    - The DOM is updated with the list of effects on the previous phase. It is done in one go. It is performed by the
    library called ReactDOM.
4) Browser paint:
    - When the browser knows the DOM was updated it updates the UI in the screen.


====================================
React Class Approach
====================================
The old React used JavaScript classes that inherited from React.Component to create components.
Inside the component the "render()" function returns the JSX and handle simple logic.
Each component is a normal class so it has to have its constructor with the props as argument, call the super method and define its variables.
Functions are created and treated as methods.
Methods lose the binding to "this" so they have to be binded in the constructor.
The state is a giant object that containes all state values.


import React from "react";

class ComponentName extends React.Component {
    constructor(props) {
        super(props);

        this.state = { key: value };
        this.method = this.method.bind(this);
    }

    method() {
        this.setState((value) => {
            return { key: value };
        });
    }

    render() {
        return (
            <div>
                <button onClick={this.method}>text</button>
            </div>
        );
    }
}

export default ComponentName;


====================================
Performance Optimization
====================================
1) Prevent wasted renders: -
    - Passing elements as children or regular props => React creates props (and therefore children) first and while the
        component is re-rendering thus preventing the child element to re-render.
    - Memoization => is to cache the results of pure function that executed the same argument again.
        - memo => memoize components.
        - useMemo => memoize objects.
        - useCallback => memoize functions.
2) Improve app speed / responsiveness: useMemo, useCallback, useTransition.
3) Reduce bundle size: use less third-party packages, code splitting and lazy loading.
    - With the lazy() function provided by react each page can be its own JavaScript file that will only be downloaded
    when the user needs it:
        const PageName = lazy( () => import("/address/of/the/file"));
        It is suggested to use the "Suspense component" to have a fallback page to show while the requested pages are loading.


====================================
Libraries
====================================

REACT ROUTER:
To route different components to different views.

CSS MODULES:
To use CSS by component.

REDUX:
To manage global state.

Recommended small libraries:
Json-Server: Simulates an external server.
DatePicker: Provides a calendar visual API.
Leaflet: Maps.




=================================================================================

====================================
React Router
====================================

====================================
CSS Modules
====================================


====================================
Redux
====================================
Redux is like the useReducer hook.
Main differences:
It uses a "store" to hold all the different "reducers".
It uses an action creator to automatize the actions.

Old:
Main differences:
The initial state is declared in the reducer function as a default value for the state argument.
The default case on the switch statement should return the state.

The store is created with the "createStore()" function import that received the reducer function.
The store has the "dispatch" method that acts as the dispatch of the useReducer.
.getState() --> store method that returns the state object.

combineReducers() --> it's a function that combines all reducers in the store.


Redux structure is to divide the code in feature folders, with each piece of code related inside its own folder.

---- React Redux ----
React reduce use a Provider component that will provide all state to the app:
<Provider store="store name"></Provider>
To use and connect Redux with React the "useSelector" hook.


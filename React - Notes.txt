======================================
Start
======================================

Imports:
import React from "react";
import ReactDOM from "react-dom/client";

Function:
function App() {
    return ...
}

Root creation and rendering:
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<React.StrictMode><App /></React.StrictMode>);

=======================================
Components
=======================================
Components are functions that always start with the first letter uppercase and have to return a SINGLE markup:
When a component is used, that is called a Component Instance.

function ComponentName(props) {
    return <tag>Text</tag>
}

Props are immutable (read-only).
Props are external data passed by the parent component.
Receiving new props causes the component to re-render.
States are mutable.

All components have the props argument even if it's empty.

CHILDREN PROP
It's the content that is between the open and close tag on a component: <Component>Children prop</Component>.
It's passed with the "children" keyword to the component props list.

React is one-way data flow, from parent to child only.

COMPONENT COMPOSITION
It's when the children prop is used to pass a component, that way the parent component is reusable and the child component
is not dependant of the parent component.

When a Component Instance is used, a React Element is created. That is what will render the Dom Element.

COMPONENT LIFECYCLE
1) Mount (The initial render, when the states and props are created).
2) Re-render (Optional; it happens when the state, the props changes or the context changes, or when the parent is re-rendered).
3) Unmount (The instance is destroyed and removed; all states and props are also destroyed).

=======================================
State
======================================
It's internal data the component can hold over time.
It comprises 3 steps: variable creation, use it and update it in an event.
import { useState } from "react"
const|let|var [variable, setFunction] = useState(defaultValue);
It's updated by the component itself.
When the state is updated the component is re-rendered.
Start always from local state and move to global only if needed.
As default value it receives pure functions without arguments too.
The default value will only be used on mount.

DERIVED STATE:
A constant that depends on a piece of state.
Derived states are created when states that can be obtained from other states are converted to simple variables.

STATE MANAGEMENT:
When to create it.
What type.
Where to place it.
How the data flows.


=======================================
Effects
=======================================
The effects are side effects, things that occur outside the component. Due to the React nature of being
pure functional, the hook useEffect is used to process that kind of side effects.
That hook is used to handle side effects during the component lifecycle and to keep it synchronized with the external world.
Effects fun after every render by default.

useEffect(func () {
    ...
}, dependencyArray)

The dependency array is composed of every state variable and prop that is used inside.
Those dependencies indicate when to run the effect: if one of them change, the effect will run again.

If an array is provided, the effect will run on mount and in every re-render triggered by the array items.
If an empty array is provided, the effect will run only on mount.
If no array is provided, the effect will run on every re-render.

The effects run after the Browser is Painted and if they update a state a re-render is made again.
The effects have an optional clean-up function that runs before the effect is called again and after the component in unmounted.
The clean-up function is declared in a return statement.


=======================================
Reference
=======================================
The useRef() hook is used to preserve information across renders.
It's a mutable box that can be changed with the ".current" method.
It can also contain DOM elements.
The biggest difference between useState and useRef is that useRef doesn't re-render the component if it changes.


=======================================
Importing CSS files
=======================================
import "css_file_location_and_name.css"


======================================
JSX syntax
======================================
JavaScript code should be within curly brackets: {12}, {data.prop}, {{key: value}}.
Props are passed to the component like HTML properties: <tag prop="value"></tag>.
Statement like if/else, for, switch, are not allowed.
Only expression are allowed.
Only one HTML wrapper is allowed. To wrap more than one the React Fragment is used: <></>.
React Fragment longer version to put keys: <React.Fragment></React.Fragment>.


======================================
Events
======================================
The events are handled like inline events on HTML but the event should be on camelcase: onClick={func}, onLoad={func}, etc.


=====================================
Hooks
=====================================
Hooks are functions that allow to interact with React internals.
All hooks start with "use": useState, useEffect, useReducer, useContext, useRef, useCallback, useMemo, useTransition,
    useDeferredValue (useLayoutEffect, useDebugValue, useImperativeHandle, useId, useExternalStore, useInsertionEffect).
They can only be used at the beginning of the function, not inside any statement like if/else, while, etc.
Custom hooks can be created.

CUSTOM HOOKS
They can be created to reuse non-visual logic that has hooks inside it.

====================================
Thinking in React
====================================
1. Breaking down the app in components and their relationship.
2. Building the static app.
3. Thinking about the state.
4. Data flow.


====================================
React Behind the Scenes
====================================
Rendering process:
1) Render is triggered:
    - Initial render of the app OR
    - State is updated: that process is triggered for the entire application.
2) Render phase:
    - Take all Component Instances that triggered a re-render
    - That creates new React Elements that create a new React Element Tree (also called a Virtual DOM):
        - The React Element Tree is a cheap version of the DOM is a JavaScript Object.
        - All children Components of the Component that needs re-rendering are re-rendered too.
    - Reconciliation and Diffing are made:
        - The reconciler is called the Fiber Tree. The reconciliation is the process in which React knows which DOM
        elements need to be inserted, deleted, or updated, because writing to the actual DOM is inefficient. The reconciler
        is the heart of React. The Fiber Tree is mutable and is not re-rendered. It keeps track of all changes in the React
        App. It is composed of a linked list, works asynchronously, and has a queue of work.
        - The diffing occurs, that is the compare of elements based on their position in the tree.
        - An updated Fiber Tree is created with a list of DOM updates (list of effects).
3) Commit phase:
    - The DOM is updated with the list of effects on the previous phase. It is done in one go. It is performed by the
    library called ReactDOM.
4) Browser paint:
    - When the browser knows the DOM was updated it updates the UI in the screen.